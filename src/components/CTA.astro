---
// src/components/CTA.astro
export interface Props {
  title?: string;
  description?: string;
  primaryText?: string;
  primaryHref?: string;
  secondaryText?: string;
  secondaryHref?: string;
  variant?: 'default' | 'gradient' | 'outline' | 'minimal';
  size?: 'sm' | 'md' | 'lg';
  className?: string;
  centerAlign?: boolean;
}

const {
  title = "Ready to Transform Your Business?",
  description = "Experience the power of our integrated solutions. Get started with a free consultation today.",
  primaryText = "Get Started",
  primaryHref = "#contact",
  secondaryText,
  secondaryHref,
  variant = 'default',
  size = 'md',
  className = '',
  centerAlign = true
} = Astro.props;

// Size classes
const sizeClasses = {
  sm: 'px-6 py-2 text-sm',
  md: 'px-8 py-3 text-base',
  lg: 'px-10 py-4 text-lg'
};

// Variant classes
const variantClasses = {
  default: 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl hover:scale-105',
  gradient: 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl hover:scale-105',
  outline: 'border-2 border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white bg-transparent',
  minimal: 'text-blue-600 hover:text-blue-700 bg-transparent hover:bg-blue-50'
};

const buttonClasses = `${sizeClasses[size]} ${variantClasses[variant]} rounded-full font-semibold transition-all duration-300 inline-flex items-center justify-center`;
---

<div class={`cta-component ${className}`}>
  <!-- Inline CTA (no background container) -->
  {variant === 'minimal' ? (
    <div class={centerAlign ? 'text-center' : 'text-left'}>
      {title && (
        <h3 class="text-xl font-bold text-slate-900 mb-2">{title}</h3>
      )}
      {description && (
        <p class="text-slate-600 mb-6">{description}</p>
      )}
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
        <a href={primaryHref} class={buttonClasses}>
          {primaryText}
          <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
          </svg>
        </a>
        {secondaryText && secondaryHref && (
          <a href={secondaryHref} class="text-slate-600 hover:text-slate-900 font-medium transition-colors">
            {secondaryText}
          </a>
        )}
      </div>
    </div>
  ) : (
    <!-- Container CTA (with background) -->
    <div class="bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white">
      <div class={centerAlign ? 'text-center' : 'text-left'}>
        {title && (
          <h3 class="text-2xl font-bold mb-4">{title}</h3>
        )}
        {description && (
          <p class="text-blue-100 mb-6 max-w-2xl mx-auto">{description}</p>
        )}
        <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
          <a href={primaryHref} class="bg-white text-blue-600 px-8 py-3 rounded-full font-semibold hover:bg-blue-50 transition-colors inline-flex items-center">
            {primaryText}
            <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
            </svg>
          </a>
          {secondaryText && secondaryHref && (
            <a href={secondaryHref} class="text-blue-100 hover:text-white font-medium transition-colors border-b border-blue-200 hover:border-white">
              {secondaryText}
            </a>
          )}
        </div>
      </div>
    </div>
  )}
</div>

<!-- Predefined CTA Variants -->
<script>
  // Add any interactive behavior here if needed
  document.addEventListener('DOMContentLoaded', () => {
    // Track CTA clicks for analytics
    const ctaButtons = document.querySelectorAll('.cta-component a');
    ctaButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const href = button.getAttribute('href');
        const text = button.textContent?.trim();
        
        // Analytics tracking would go here
        console.log(`CTA clicked: ${text} -> ${href}`);
        
        // Smooth scroll for anchor links
        if (href?.startsWith('#')) {
          e.preventDefault();
          const target = document.querySelector(href);
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });
  });
</script>

<style>
  .cta-component {
    /* Ensure consistent spacing */
    margin: 0;
  }
  
  /* Hover effects for buttons */
  .cta-component a {
    text-decoration: none;
    transition: all 0.3s ease;
  }
  
  /* Focus styles for accessibility */
  .cta-component a:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* Animation for gradient backgrounds */
  .bg-gradient-to-r {
    background-size: 200% 200%;
    animation: gradient-shift 8s ease infinite;
  }
  
  @keyframes gradient-shift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }
</style>
